#
# This file contains useful Bash functions
# and can be "source"d from the scripts.
#

[ -n "$CI_FUNCTIONS_INCLUDED" ] && {
	echo "ci.functions can't be included more than once"
	exit 1
}

CI_FUNCTIONS_INCLUDED=1

declare -a POSITIONAL_ARGS
for a in "$@" ; do
	OPTION_COUNT+=1
	case "$a" in
		--*=*)
			[[ $a =~ --([^=]+)=(.*) ]]
			l=${BASH_REMATCH[1]//-/_}
			r=${BASH_REMATCH[2]}
			eval ${l^^}=\"$r\"
			;;
		--*)
			[[ $a =~ --(.+) ]]
			l=${BASH_REMATCH[1]//-/_}
			eval ${l^^}=true
			;;
		--no-*)
			[[ $a =~ --no-(.+) ]]
			l=${BASH_REMATCH[1]//-/_}
			eval ${l^^}=false
			;;
		*)
			POSITIONAL_ARGS+=($a)
			;;
	esac
done

runner() {
	( set -x ; ${@} )
}

begin_group() {
	echo "::group::$1"
	trap end_group EXIT
}

end_group() {
	trap - EXIT
	echo "::endgroup::"
}

asterisk_corefile_glob() {
	local pattern=$(/sbin/sysctl -n kernel.core_pattern)

	# If core_pattern is a pipe there isn't much we can do
	if [[ ${pattern:0:1} == "|" ]] ; then
		echo "core*"
	else
		astpath=$(which asterisk)
		pattern=${pattern/\%e/asterisk}
		pattern=${pattern/\%f/asterisk}
		pattern=${pattern/\%E/${astpath//\//\!}}
		echo "${pattern%%%*}*"
	fi
}

export_to_github() {
	out=${GITHUB_ENV:-/dev/stdout}
	for var in "$@" ; do
		declare -n vc=$var
		echo "$var=$vc" >> "$out"
	done
}