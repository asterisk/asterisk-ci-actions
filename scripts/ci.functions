#
# This file contains useful Bash functions
# and can be "source"d from the scripts.
#

[ -n "$CI_FUNCTIONS_INCLUDED" ] && {
	echo "ci.functions can't be included more than once" >&2
	exit 1
}

CI_FUNCTIONS_INCLUDED=1
PROGNAME=$(basename $(readlink -fn $0))

echo "====== Entering ${PROGNAME}" >&2
trap 'echo "====== Exiting ${PROGNAME} Exit code $?" >&2' EXIT

declare -a POSITIONAL_ARGS
for a in "$@" ; do
	OPTION_COUNT+=1
	case "$a" in
		--*=*)
			[[ $a =~ --([^=]+)=(.*) ]]
			l=${BASH_REMATCH[1]//-/_}
			printf -v "${l^^}" "%b" "${BASH_REMATCH[2]}"
			;;
		--*)
			[[ $a =~ --(.+) ]]
			l=${BASH_REMATCH[1]//-/_}
			printf -v "${l^^}" "%b" "true"
			;;
		--no-*)
			[[ $a =~ --no-(.+) ]]
			l=${BASH_REMATCH[1]//-/_}
			printf -v "${l^^}" "%b" "false"
			;;
		*)
			POSITIONAL_ARGS+=($a)
			;;
	esac
done

runner() {
	( set -x ; ${@} )
}

begin_group() {
	${GITHUB_ACTIONS:-false} || return 0
	echo "::group::$1"
#	trap end_group EXIT
}

end_group() {
	${GITHUB_ACTIONS:-false} || return 0
	trap - EXIT
#	echo "::endgroup::"
}

asterisk_corefile_glob() {
	local pattern="$(/sbin/sysctl -n kernel.core_pattern)"

	# If core_pattern is a pipe there isn't much we can do
	if [[ "${pattern:0:1}" == "|" ]] ; then
		echo "logs/core*"
	else
		astpath=$(which asterisk)
		pattern=${pattern/\%e/asterisk}
		pattern=${pattern/\%f/asterisk}
		pattern=${pattern/\%E/${astpath//\//\!}}
		echo "${pattern%%%*}*"
	fi
}

export_to_github() {
	out=${GITHUB_ENV:-/dev/stdout}
	for var in "$@" ; do
		echo "$var=${!var}" >> "$out"
	done
}

printvars() {
	for var in "$@" ; do
		debug_out "$var=${!var}" >&2
	done
}

assert_env_variable() {
	if [ -z "${!1}" ] ; then
		echo "::error::Missing $1 in environment" >&2
		return 1
	fi
}

assert_env_variables() {
	printit=false
	rc=0
	[ "$1" == "--print" ] && { printit=true ; shift ; }
	for var in "$@" ; do
		if [ -z "${!var}" ] ; then
			echo "::error::Missing $var in environment" >&2
			rc=1
			continue
		fi
		$printit && echo "$var=${!var}" >&2
	done
	return $rc
}

debug_out() {
	[ ${#@} -eq 0 ] && return 0
	_IFS=$"$IFS"
	IFS=$'\n'
	echo "${*/#*/${PROGNAME}: &}" >&2
	unset IFS
	IFS=$"$_IFS"
}

error_out() {
	[ ${#@} -eq 0 ] && return 0
	_IFS=$"$IFS"
	IFS=$'\n'
	echo "::error::${*/#*/${PROGNAME}: &}" >&2
	unset IFS
	IFS=$"$_IFS"
}

log_error_msgs() {
	[ ${#@} -eq 0 ] && return 0
	_IFS=$"$IFS"
	IFS=$'\n'
	echo "::error::${*/#*/${PROGNAME}: &}" >&2
	[ -n "${LOG_FILE}" ] && {
		rp=$(realpath -m "${LOG_FILE}")
		logdir=$(dirname "${rp}")
		[ ! -d "${logdir}" ] && mkdir -p "${logdir}"
		echo "${*/#*/${PROGNAME}: &}" >> "${LOG_FILE}"
	}
	unset IFS
	IFS=$"$_IFS"
}

log_failed_tests() {
	[ ${#@} -eq 0 ] && return 0
	_IFS=$"$IFS"
	IFS=$'\n'
	[ -n "${LOG_FILE}" ] && {
		rp=$(realpath -m "${LOG_FILE}")
		logdir=$(dirname "${rp}")
		[ ! -d "${logdir}" ] && mkdir -p "${logdir}"
		echo "${*/#*/FAILED TEST: &}" >> "${LOG_FILE}"
	}
	unset IFS
	IFS=$"$_IFS"
}
