name: Build
on:
  workflow_call:
    inputs:
      actions_ref:
        description: 'JSON object reference to the actions: { "owner": "asterisk", "repo": "asterisk-ci-actions", "branch": "main" }'
        type: string
        required: false
        default: '{ "owner": "asterisk", "repo": "asterisk-ci-actions", "branch": "main" }'
      test_type:
        description: 'nightly, prstatechange, prrecheck, cherry-pick'
        required: true
        type: string
      asterisk_repo:
        required: true
        type: string
      pr_number:
        required: true
        type: string
      base_branch:
        required: true
        type: string
      is_cherry_pick:
        required: false
        type: boolean
        default: false
      build_script:
        required: false
        type: string
        default: "buildAsterisk.sh"
      no_alembic:
        required: false
        type: boolean
        default: false
      build_options:
        required: false
        type: string
        default: ""
      modules_blacklist:
        description: 'List of Asterisk modules to blacklist from the build'
        type: string
        default: ""
        required: false
      sipp_version:
        required: false
        type: string
        default: v3.6.1
      output_cache_dir:
        type: string
        required: false
        default: cache
      build_cache_dir:
        type: string
        required: false
        default: ""
      build_cache_key:
        type: string
        required: false
        default: ""
      debug:
        required: false
        type: boolean
        default: false
      job_name_extra:
        required: false
        type: string
        default: ""
    secrets:
      TOKEN:
        required: true

env:
  GH_TOKEN:          ${{ secrets.TOKEN }}
  GITHUB_TOKEN:      ${{ secrets.TOKEN }}
  ASTERISK_REPO:     ${{ inputs.asterisk_repo }}
  BASE_BRANCH:       ${{ inputs.base_branch }}
  IS_CHERRY_PICK:    ${{ inputs.is_cherry_pick }}
  PR_NUMBER:         ${{ inputs.pr_number }}
  NO_ALEMBIC:        ${{ inputs.no_alembic }}
  BUILD_SCRIPT:      ${{ inputs.build_script }}
  BUILD_OPTIONS:     ${{ inputs.build_options }}
  MODULES_BLACKLIST: ${{ inputs.modules_blacklist }}
  SIPP_VERSION:      ${{ inputs.sipp_version }}
  CACHE_DIR:         ${{ github.workspace }}/${{ inputs.output_cache_dir }}
  REPO_DIR:          ${{ github.event.repository.name }}
  REPO_ORG:          ${{ github.event.repository.owner.login }}
  OUTPUT_DIR:        ${{ github.workspace }}/${{ inputs.output_cache_dir }}/output
  BUILD_CACHE_DIR:   ${{ inputs.build_cache_dir }}
  BUILD_CACHE_PATH:  ${{ github.workspace }}/${{ inputs.build_cache_dir }}
  BUILD_CACHE_KEY:   ${{ inputs.build_cache_key }}
  ACTIONS_OWNER:     ${{ fromJSON(inputs.actions_ref).owner }}
  ACTIONS_REPO:      ${{ fromJSON(inputs.actions_ref).repo }}
  ACTIONS_BRANCH:    ${{ fromJSON(inputs.actions_ref).branch }}
  SCRIPT_DIR:        ${{ github.workspace }}/asterisk-ci-actions/scripts

jobs:
  Build:
    name: ${{ inputs.base_branch }}-build${{inputs.job_name_extra}}
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Setup Runner
        run: |
          # Setup
          wget -qO asterisk-ci-actions.tar.gz \
            https://github.com/${ACTIONS_OWNER}/${ACTIONS_REPO}/archive/refs/heads/${ACTIONS_BRANCH}.tar.gz
          tar -xf asterisk-ci-actions.tar.gz --transform="s/^${ACTIONS_REPO}-${ACTIONS_BRANCH}/asterisk-ci-actions/g"
          sudo ${SCRIPT_DIR}/setupRunner.sh --sipp-version=${SIPP_VERSION}

      - name: BuildAsterisk
        run: |
          # Building Asterisk
          REPO_DIR=$(basename ${ASTERISK_REPO})

          mkdir -p ${REPO_DIR}
          mkdir -p ${CACHE_DIR}
          mkdir -p ${OUTPUT_DIR}

          echo "*** Checking out ${ASTERISK_REPO}"
          ${SCRIPT_DIR}/checkoutRepo.sh --repo=${ASTERISK_REPO} \
            --branch=${BASE_BRANCH} --is-cherry-pick=${IS_CHERRY_PICK} \
            --pr-number=${PR_NUMBER} --destination=${REPO_DIR}

          cd ${REPO_DIR}
          
          if ! ${NO_ALEMBIC} ; then
            echo "*** Running Alembic Tests"
            sudo ${SCRIPT_DIR}/setupDatabase.sh
            sudo ${SCRIPT_DIR}/runAlembicTests.sh
            sudo ${SCRIPT_DIR}/teardownDatabase.sh --stop-database
          fi

          echo "*** Starting build"
          ${SCRIPT_DIR}/${BUILD_SCRIPT} --github --branch-name=${BASE_BRANCH} \
            --ccache-disable ${BUILD_OPTIONS} \
            --modules-blacklist="${MODULES_BLACKLIST// /}" \
            --output-dir=${OUTPUT_DIR} \
            --cache-dir=${CACHE_DIR}
          echo "*** Build Complete"

          if [ -z "${BUILD_CACHE_DIR}" ] ; then
            echo "*** No build cache dir specified.  Not caching"
            exit 0
          fi

          mkdir -p ${BUILD_CACHE_PATH}
          echo "*** Installing binaries to ${BUILD_CACHE_PATH}"
          make DESTDIR=${BUILD_CACHE_PATH} WGET_EXTRA_ARGS=-q install >/dev/null
          echo "*** Installing samples to ${BUILD_CACHE_PATH}"
          make DESTDIR=${BUILD_CACHE_PATH} samples >/dev/null
          echo "*** Installing headers to ${BUILD_CACHE_PATH}"
          make DESTDIR=${BUILD_CACHE_PATH} install-headers  >/dev/null
          echo "*** Caching source"
          git archive --format=tar -o ${BUILD_CACHE_PATH}/asterisk-source.tar --prefix=${REPO_DIR}/ HEAD
          gzip ${BUILD_CACHE_PATH}/asterisk-source.tar
          ls -al ${BUILD_CACHE_PATH}/
          echo "*** Install Complete"

          echo "*** Deleting old cache (if any): ${BUILD_CACHE_KEY}"
          # We don't care if it fails
          gh cache delete ${BUILD_CACHE_KEY} || :

      - id: cache-build-output
        if: inputs.build_cache_dir != '' && inputs.build_cache_key != ''
        name: CacheBuildProducts
        uses: actions/cache/save@v4
        with:
          path: ${{ inputs.build_cache_dir }}
          key:  ${{ inputs.build_cache_key }}
