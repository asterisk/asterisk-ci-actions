name: PRCheck
on:
  workflow_call:

permissions:
  actions: write
  checks: read
  contents: read
  issues: read
  pull-requests: write
  statuses: read

env:
  REPO:            ${{ github.repository }}
  REPO_DIR:        ${{ github.workspace }}/${{ github.event.repository.name }}
  REPO_ORG:        ${{ github.event.repository.owner.login }}
  PR_NUMBER:       ${{ github.event.number }}
  BASE_BRANCH:     ${{ github.event.pull_request.base.ref }}
  WORKFLOW_NAME:   ${{ github.workflow }}
  WORKFLOW_RUN_ID: ${{ github.run_id }}
  GH_TOKEN:        ${{ github.token }}
  LOG_DIR:         ${{ github.workspace }}/logs
  LOG_FILE:        ${{ github.workspace }}/logs/job_summary.txt
  BUILD_CACHE_KEY: ${{ github.workflow }}-${{ github.run_number }}-${{ github.event.number }}-${{ github.event.pull_request.base.ref }}
  TRIGGER:         ${{ github.event.action }}
  TESTING_IN_PROGRESS: ${{ vars.PR_SUBMIT_TESTING_IN_PROGRESS }}
  TESTS_PASSED:        ${{ vars.PR_SUBMIT_TESTS_PASSED }}
  TESTS_FAILED:        ${{ vars.PR_SUBMIT_TESTS_FAILED }}

jobs:
  Setup:
    runs-on: ubuntu-latest
    outputs:
      testsuite_test_pr: ${{ steps.setup.outputs.TESTSUITE_TEST_PR }}
    steps:
        # ACTIONS_PATH, SCRIPT_DIR, NORMALIZED_BRANCH env vars
      - name: GetActionsRepo
        uses: asterisk/asterisk-ci-actions/GetActionsRepo@main

      - id: setup
        name: Setup
        env:
          PR_STATE_CHANGE_DELAY_SEC: ${{ vars.PR_STATE_CHANGE_DELAY_SEC || 120 }}
          RECHECKPR_LABEL:           ${{ vars.RECHECKPR_LABEL }}
          TESTSUITE_TEST_PR_REGEX:   ${{ vars.TESTSUITE_TEST_PR_REGEX }}
        run: |
          if [ "$TRIGGER" != "labeled" ] ; then
            # Wait then get testsuite PR
            echo "Waiting for ${PR_STATE_CHANGE_DELAY_SEC} seconds to give user a chance to add PR comments"
            sleep ${PR_STATE_CHANGE_DELAY_SEC}
          fi

          # Testsuite PR will be placed in TESTSUITE_TEST_PR in both
          # GITHUB_ENV and GITHUB_OUTPUT by the script.
          ${SCRIPT_DIR}/getTestsuitePRfromAsteriskPR.sh \
            --repo=${REPO} \
            --pr-number=${PR_NUMBER} \
            --testsuite-pr-regex="${TESTSUITE_TEST_PR_REGEX}"

          echo "Attempting to delete any existing cache"
          gh cache delete -R ${REPO} ${BUILD_CACHE_KEY} || :

          echo "Labeling"
          gh pr edit --repo ${REPO} \
            --remove-label ${RECHECKPR_LABEL} \
            --remove-label ${TESTS_PASSED} \
            --remove-label ${TESTS_FAILED} \
            --add-label ${TESTING_IN_PROGRESS} \
            ${PR_NUMBER} || :

  Check:
    name: Check
    needs: [ Setup ]
    permissions:
      actions: read
      checks: read
      contents: read
      issues: read
      pull-requests: read
      statuses: read
    uses: ./.github/workflows/AsteriskUnitGateTest.yml
    with:
      test_type:         prstatechange
      asterisk_repo:     ${{ github.repository }}
      pr_number:         ${{ github.event.number }}
      base_branch:       ${{ github.event.pull_request.base.ref }}
      is_cherry_pick:    false
      build_options:     ${{ vars.BUILD_OPTIONS }}
      unittest_command:  ${{ vars.UNITTEST_COMMAND }}
      testsuite_repo:    ${{ vars.TESTSUITE_REPO }}
      testsuite_test_pr: ${{ needs.Setup.outputs.testsuite_test_pr }}
      gatetest_list:     ${{ vars.GATETEST_LIST }}
      gatetest_commands: ${{ vars.GATETEST_COMMANDS }}

  PostWorkflow:
    if: ${{ success() || failure() || cancelled() }}
    runs-on: ubuntu-latest
    needs: [Setup,Check]
    env:
      RESULT_SETUP:   ${{ needs.Setup.result }}
      RESULT_CHECK:   ${{ needs.Check.result }}
      CHERRY_PICK_REGEX:       ${{ vars.CHERRY_PICK_REGEX }}
      CHERRY_PICK_REMINDER:    ${{ vars.CHERRY_PICK_REMINDER }}
      SQUASH_COMMITS_REMINDER: ${{ vars.SQUASH_COMMITS_REMINDER }}
      USER_NOTE_REMINDER:      ${{ vars.USER_NOTE_REMINDER }}
      UPGRADE_NOTE_REMINDER:   ${{ vars.UPGRADE_NOTE_REMINDER }}
    steps:
        # ACTIONS_PATH, SCRIPT_DIR, NORMALIZED_BRANCH env vars
      - name: GetActionsRepo
        uses: asterisk/asterisk-ci-actions/GetActionsRepo@main

      - name: Add labels, reminders and summary
        run: |

          label=""
          RESULT=$RESULT_CHECK
          echo "Setup status: $RESULT_SETUP Check status: $RESULT_CHECK"
          case $RESULT_CHECK in
            success)
              label=$TESTS_PASSED
              gh cache delete -R ${REPO} ${BUILD_CACHE_KEY} || :
              ;;
            failure)
              label=$TESTS_FAILED
              ;;
            cancelled)
              gh cache delete -R ${REPO} ${BUILD_CACHE_KEY} || :
              ;;
            skipped)
              if [ "$RESULT_SETUP" == "failure" ] ; then
                  RESULT=failure
                  label=$TESTS_FAILED
              fi
              ;;
            *)
              ;;
          esac

          echo "RESULT: '${RESULT}'  Setting label: '$label'"
          gh pr edit --repo ${REPO} \
            --remove-label ${TESTING_IN_PROGRESS} \
            ${label:+--add-label $label} \
              $PR_NUMBER || :

          if [[ $RESULT =~ (success|failure) ]] ; then
            ${SCRIPT_DIR}/addCherryPickReminderIfNeeded.sh \
              --repo=${REPO} \
              --pr-number=${PR_NUMBER} \
              --cherry-pick-regex="${CHERRY_PICK_REGEX}" \
              --cherry-pick-reminder="${CHERRY_PICK_REMINDER}"

            ${SCRIPT_DIR}/createJobSummary.sh \
              --result=${RESULT} \
              --repo=${REPO} \
              --workflow-name="${WORKFLOW_NAME}" \
              --pr-number=${PR_NUMBER} \
              --workflow-run=${WORKFLOW_RUN_ID} \
              --tmp-dir=./run-${WORKFLOW_RUN_ID} \
              --job-summary-output=job_summary.txt \
              --write-step-summary \
              --add-pr-comment \
              --verbose || :
          fi
          exit 0
