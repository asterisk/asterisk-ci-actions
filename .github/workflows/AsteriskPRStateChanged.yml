name: PRStateChanged
run-name: "${{ github.workflow }}-${{ github.event.label.name }}-${{ github.event.number }}"
on:
  workflow_call:
    inputs:
      actions_ref:
        description: 'JSON object reference to the actions: { "owner": "asterisk", "repo": "asterisk-ci-actions", "branch": "main" }'
        type: string
        required: false
        default: '{ "owner": "asterisk", "repo": "asterisk-ci-actions", "branch": "main" }'
    secrets:
      TOKEN:
        required: true

env:
  REPO:      ${{ github.repository }}
  PR_NUMBER: ${{ github.event.number }}
  WORKFLOW_RUN_ID:   ${{ github.run_id }}
  ACTIONS_OWNER:     ${{ fromJSON(inputs.actions_ref).owner }}
  ACTIONS_REPO:      ${{ fromJSON(inputs.actions_ref).repo }}
  ACTIONS_BRANCH:    ${{ fromJSON(inputs.actions_ref).branch }}
  SCRIPT_DIR:        ${{ github.workspace }}/asterisk-ci-actions/scripts
  GH_TOKEN:          ${{ secrets.TOKEN }}

jobs:
  Setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      vars:  ${{ steps.getvars.outputs.control_data }}
      testsuite_test_pr:  ${{ steps.prestart.outputs.TESTSUITE_TEST_PR }}
    steps:
      - name: DumpEnvironment
        uses: asterisk/asterisk-ci-actions/DumpEnvironmentAction@main

      - name: Setup Runner
        run: |
          # Setup
          wget -qO asterisk-ci-actions.tar.gz \
            https://github.com/${ACTIONS_OWNER}/${ACTIONS_REPO}/archive/refs/heads/${ACTIONS_BRANCH}.tar.gz
          tar -xf asterisk-ci-actions.tar.gz --transform="s/^${ACTIONS_REPO}-${ACTIONS_BRANCH}/asterisk-ci-actions/g"

      - name: GetVars
        id: getvars
        uses: asterisk/asterisk-ci-actions/GetRepoControlData@main
        with:
          repo: ${{ github.event.repository.name }}

      - name: PreStart
        id: prestart
        env:
          PR_STATE_CHANGE_DELAY_SEC: ${{ fromJSON(steps.getvars.outputs.control_data).PR_STATE_CHANGE_DELAY_SEC || 120 }}
          TESTSUITE_TEST_PR_REGEX:   ${{ fromJSON(steps.getvars.outputs.control_data).TESTSUITE_TEST_PR_REGEX }}
        run: |
          echo "Waiting for ${PR_STATE_CHANGE_DELAY_SEC} seconds to give user a chance to add PR comments"
          sleep ${PR_STATE_CHANGE_DELAY_SEC}
          
          ${SCRIPT_DIR}/getTestsuitePRfromAsteriskPR.sh \
            --repo=${REPO} \
            --pr-number=${PR_NUMBER} \
            --testsuite-pr-regex="${TESTSUITE_TEST_PR_REGEX}"
          
          exit 0

  Check:
    name: Check
    needs: Setup
    uses: asterisk/asterisk-ci-actions/.github/workflows/AsteriskUnitGateTest.yml@main
    with:
      test_type:         prstatechange
      asterisk_repo:     ${{ github.repository }}
      pr_number:         ${{ github.event.number }}
      base_branch:       ${{ github.event.pull_request.base.ref }}
      build_options:     ${{ fromJSON(needs.Setup.outputs.vars).BUILD_OPTIONS }}
      unittest_command:  ${{ fromJSON(needs.Setup.outputs.vars).UNITTEST_COMMAND }}
      testsuite_repo:    ${{ fromJSON(needs.Setup.outputs.vars).TESTSUITE_REPO }}
      testsuite_test_pr: ${{ needs.Setup.outputs.testsuite_test_pr }}
      gatetest_list:     ${{ fromJSON(needs.Setup.outputs.vars).GATETEST_LIST }}
      gatetest_commands: ${{ fromJSON(needs.Setup.outputs.vars).GATETEST_COMMANDS }}
    secrets:
      TOKEN: ${{ secrets.GITHUB_TOKEN }}

  Cleanup:
    needs: [ Setup, Check ]
    if: ${{ ( success() || failure() ) }}
    runs-on: ubuntu-latest
    steps:
      - name: Create Job Summary
        env:
          RESULT: ${{ needs.Check.result }}
        run: |
          cd ${GITHUB_WORKSPACE}

          wget -qO asterisk-ci-actions.tar.gz \
            https://github.com/${ACTIONS_OWNER}/${ACTIONS_REPO}/archive/refs/heads/${ACTIONS_BRANCH}.tar.gz
          tar -xf asterisk-ci-actions.tar.gz --transform="s/^${ACTIONS_REPO}-${ACTIONS_BRANCH}/asterisk-ci-actions/g"

          mkdir logs
          ${SCRIPT_DIR}/createJobSummary.sh \
            --repo=${REPO} \
            --pr-number=${PR_NUMBER} \
            --workflow-run=${WORKFLOW_RUN_ID} \
            --tmp-dir=./run-${WORKFLOW_RUN_ID} \
            --output-dir=./logs
          if [ ! -f ./logs/job_summary.txt ] ; then
            echo "No failures" >> ./logs/job_summary.txt
          fi
          cat ./logs/job_summary.txt
          echo "STEP SUMMARY FILE: $GITHUB_STEP_SUMMARY"
          cat ./logs/job_summary.txt >> $GITHUB_STEP_SUMMARY
          exit 0
          
      - name: Save Output
        id: save-output
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: workflow_summary
          path: |
            logs


