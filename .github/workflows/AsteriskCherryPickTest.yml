name: CherryPickTest
on:
  workflow_call:
    inputs:
      actions_ref:
        description: 'JSON object reference to the actions: { "owner": "asterisk", "repo": "asterisk-ci-actions", "branch": "main" }'
        type: string
        required: false
        default: '{ "owner": "asterisk", "repo": "asterisk-ci-actions", "branch": "main" }'
    secrets:
      TOKEN:
        required: true

env:
  REPO:           ${{ github.repository }}
  PR_NUMBER:      ${{ github.event.number }}
  WORKFLOW_RUN_ID:   ${{ github.run_id }}
  REPO_DIR:       ${{ github.event.repository.name }}
  REPO_ORG:       ${{ github.event.repository.owner.login }}
  GH_TOKEN:       ${{ secrets.TOKEN }}
  ACTIONS_OWNER:  ${{ fromJSON(inputs.actions_ref).owner }}
  ACTIONS_REPO:   ${{ fromJSON(inputs.actions_ref).repo }}
  ACTIONS_BRANCH: ${{ fromJSON(inputs.actions_ref).branch }}
  SCRIPT_DIR:     ${{ github.workspace }}/asterisk-ci-actions/scripts

jobs:
  Setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      branches:           ${{ steps.prestart.outputs.BRANCHES }}
      branch_count:       ${{ steps.prestart.outputs.BRANCH_COUNT }}
      testsuite_test_pr:  ${{ steps.prestart.outputs.TESTSUITE_TEST_PR }}
    steps:
      - name: Setup Runner
        run: |
          # Setup
          wget -qO asterisk-ci-actions.tar.gz \
            https://github.com/${ACTIONS_OWNER}/${ACTIONS_REPO}/archive/refs/heads/${ACTIONS_BRANCH}.tar.gz
          tar -xf asterisk-ci-actions.tar.gz --transform="s/^${ACTIONS_REPO}-${ACTIONS_BRANCH}/asterisk-ci-actions/g"

      - name: PreStart
        id: prestart
        env:
          CHERRY_PICK_TEST_LABEL:          ${{ vars.CHERRY_PICK_TEST_LABEL }}
          CHERRY_PICK_CHECKS_PASSED_LABEL: ${{ vars.CHERRY_PICK_CHECKS_PASSED_LABEL }}
          CHERRY_PICK_CHECKS_FAILED_LABEL: ${{ vars.CHERRY_PICK_CHECKS_FAILED_LABEL }}
          CHERRY_PICK_TESTING_IN_PROGRESS: ${{ vars.CHERRY_PICK_TESTING_IN_PROGRESS }}
          CHERRY_PICK_REGEX:               ${{ vars.CHERRY_PICK_REGEX }}
          TESTSUITE_TEST_PR_REGEX:         ${{ vars.TESTSUITE_TEST_PR_REGEX }}
        run: |
          gh pr edit --repo ${REPO} \
            --remove-label ${CHERRY_PICK_TEST_LABEL} \
            --remove-label ${CHERRY_PICK_CHECKS_PASSED_LABEL} \
            --remove-label ${CHERRY_PICK_CHECKS_FAILED_LABEL} \
            --remove-label ${CHERRY_PICK_TESTING_IN_PROGRESS} \
            ${PR_NUMBER} || :

          # The script will populate BRANCHES and BRANCH_COUNT in
          # both GITHUB_ENV and GITHUB_OUTPUT for future use but
          # we need them here as well so we need to capture and
          # parse the output.
          result=$(${SCRIPT_DIR}/getCherryPickBranchesFromPR.sh \
            --repo=${REPO} \
            --pr-number=${PR_NUMBER} \
            --cherry-pick-regex="${CHERRY_PICK_REGEX}")
          BRANCH_COUNT=$(echo ${result} | jq -c '.branch_count')
          BRANCHES=$(echo ${result} | jq -c '.branches')
          FORCED_NONE=$(echo ${result} | jq -c '.forced_none')

          if [ ${BRANCH_COUNT} -eq 0 ] ; then
            echo "No cherry-pick branches"
            exit 0
          fi

          gh pr edit --repo ${REPO} \
            --add-label ${CHERRY_PICK_TESTING_IN_PROGRESS} \
            ${PR_NUMBER} || :

          # The script will populate TESTSUITE_TEST_PR in both
          # GITHUB_ENV and GITHUB_OUTPUT.
          ${SCRIPT_DIR}/getTestsuitePRfromAsteriskPR.sh \
            --repo=${REPO} \
            --pr-number=${PR_NUMBER} \
            --testsuite-pr-regex="${TESTSUITE_TEST_PR_REGEX}"
          

  WillCherryPickCleanly:
    needs: [Setup]
    if: ${{ needs.Setup.outputs.branch_count > 0 }}
    runs-on: ubuntu-latest
    steps:
      - name: Setup Runner
        run: |
          # Setup
          wget -qO asterisk-ci-actions.tar.gz \
            https://github.com/${ACTIONS_OWNER}/${ACTIONS_REPO}/archive/refs/heads/${ACTIONS_BRANCH}.tar.gz
          tar -xf asterisk-ci-actions.tar.gz --transform="s/^${ACTIONS_REPO}-${ACTIONS_BRANCH}/asterisk-ci-actions/g"
  
      - name: CheckCherryPicks
        env:
          BRANCHES: ${{ needs.Setup.outputs.branches }}
        run: |
          ${SCRIPT_DIR}/cherryPick.sh \
            --repo=${REPO} \
            --repo-dir=${REPO_DIR} \
            --pr-number=${PR_NUMBER} \
            --branches="${BRANCHES}"

  CherryPickTestMatrix:
    needs: [Setup,WillCherryPickCleanly]
    if: ${{ needs.Setup.outputs.branch_count > 0 }}
    strategy:
      fail-fast: false
      matrix:
        branch: ${{ fromJSON(needs.Setup.outputs.branches) }}
    uses: ./.github/workflows/AsteriskUnitGateTest.yml
    with:
      actions_ref:       ${{ inputs.actions_ref }}
      test_type:         cherry-pick
      asterisk_repo:     ${{ github.repository }}
      pr_number:         ${{ github.event.number }}
      base_branch:       ${{ matrix.branch }}
      is_cherry_pick:    true
      build_options:     ${{ vars.BUILD_OPTIONS }}
      unittest_command:  ${{ vars.UNITTEST_COMMAND }}
      testsuite_repo:    ${{ vars.TESTSUITE_REPO }}
      testsuite_test_pr: ${{ needs.Setup.outputs.testsuite_test_pr }}
      gatetest_list:     ${{ vars.GATETEST_LIST }}
      gatetest_commands: ${{ vars.GATETEST_COMMANDS }}
    secrets: inherit

  Cleanup:
    needs: [ Setup, WillCherryPickCleanly, CherryPickTestMatrix ]
    if: ${{ needs.Setup.outputs.branch_count > 0 && ( success() || failure() ) }}
    runs-on: ubuntu-latest
    steps:
      - name: Check test matrix status
        env:
          RESULT_CLEAN:      ${{ needs.WillCherryPickCleanly.result }}
          RESULT_UNIT:       ${{ needs.CherryPickTestMatrix.result }}
          IN_PROGRESS_LABEL: ${{ vars.CHERRY_PICK_TESTING_IN_PROGRESS }}
          PASSED_LABEL:      ${{ vars.CHERRY_PICK_CHECKS_PASSED_LABEL }}
          FAILED_LABEL:      ${{ vars.CHERRY_PICK_CHECKS_FAILED_LABEL }}
        run: |
          declare -i rc=0
          case $RESULT_UNIT in
            success)
              echo "All tests passed"
              ;;
            skipped)
              echo "One or more tests were skipped because of an earlier failure"
              rc+=1
              ;;
            *)
              echo "One or more tests failed ($RESULT)"
              rc+=1
          esac
          [ $rc -gt 0 ] && label=$FAILED_LABEL || label=$PASSED_LABEL
          gh pr edit --repo ${REPO} \
            --remove-label $IN_PROGRESS_LABEL \
            --add-label $label \
            $PR_NUMBER || :
          exit 0

      - name: Create Job Summary
        env:
          RESULT: ${{ needs.Check.result }}
        run: |
          cd ${GITHUB_WORKSPACE}

          wget -qO asterisk-ci-actions.tar.gz \
            https://github.com/${ACTIONS_OWNER}/${ACTIONS_REPO}/archive/refs/heads/${ACTIONS_BRANCH}.tar.gz
          tar -xf asterisk-ci-actions.tar.gz --transform="s/^${ACTIONS_REPO}-${ACTIONS_BRANCH}/asterisk-ci-actions/g"

          mkdir logs
          ${SCRIPT_DIR}/createJobSummary.sh \
            --repo=${REPO} \
            --pr-number=${PR_NUMBER} \
            --workflow-run=${WORKFLOW_RUN_ID} \
            --tmp-dir=./run-${WORKFLOW_RUN_ID} \
            --output-dir=./logs
          if [ ! -f ./logs/job_summary.txt ] ; then
            echo "No failures" >> ./logs/job_summary.txt
          fi
          cat ./logs/job_summary.txt
          echo "STEP SUMMARY FILE: $GITHUB_STEP_SUMMARY"
          cat ./logs/job_summary.txt >> $GITHUB_STEP_SUMMARY
          exit 0

      - name: Save Output
        id: save-output
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: workflow_summary
          path: |
            logs

