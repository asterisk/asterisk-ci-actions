name: PRCPCheck
on:
  workflow_call:

permissions:
  actions: write
  checks: read
  contents: read
  issues: read
  pull-requests: write
  repository-projects: read
  statuses: read

env:
  REPO:            ${{ github.repository }}
  REPO_DIR:        ${{ github.workspace }}/${{ github.event.repository.name }}
  REPO_ORG:        ${{ github.event.repository.owner.login }}
  PR_NUMBER:       ${{ github.event.number }}
  BASE_BRANCH:     ${{ github.event.pull_request.base.ref }}
  WORKFLOW_NAME:   ${{ github.workflow }}
  WORKFLOW_RUN_ID: ${{ github.run_id }}
  GH_TOKEN:        ${{ secrets.GITHUB_TOKEN }}
  LOG_DIR:         ${{ github.workspace }}/logs
  LOG_FILE:        ${{ github.workspace }}/logs/job_summary.txt
  TESTING_IN_PROGRESS: ${{ vars.CHERRY_PICK_TESTING_IN_PROGRESS }}
  TESTS_PASSED:        ${{ vars.CHERRY_PICK_CHECKS_PASSED_LABEL }}
  TESTS_FAILED:        ${{ vars.CHERRY_PICK_CHECKS_FAILED_LABEL }}
  ASSOCIATED_TEST_PR_REGEX: ${{ vars.ASSOCIATED_TEST_PR_REGEX }}
  CHERRY_PICK_TEST_LABEL:   ${{ vars.CHERRY_PICK_TEST_LABEL }}
  CHERRY_PICK_REGEX:        ${{ vars.CHERRY_PICK_REGEX }}

jobs:
  Setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      asterisk_test_pr:   ${{ steps.setup.outputs.ASSOCIATED_TEST_PR }}
      branches:           ${{ steps.setup.outputs.BRANCHES }}
      branch_count:       ${{ steps.setup.outputs.BRANCH_COUNT }}
      nontest_count:      ${{ steps.checkfiles.outputs.nontest_count }}
      gatetest_count:     ${{ steps.checkfiles.outputs.gatetest_count }}
      gatetest_group:     ${{ steps.checkfiles.outputs.gatetest_group }}
      gatetest_commands:  ${{ steps.checkfiles.outputs.gatetest_commands }}
    steps:
        # ACTIONS_PATH, SCRIPT_DIR, NORMALIZED_BRANCH env vars
      - name: GetActionsRepo
        uses: asterisk/asterisk-ci-actions/GetActionsRepo@main

      - name: Setup
        id: setup
        run: |
          # Label, get Asterisk PR and cherry-pick branches.
          gh pr edit --repo ${REPO} \
            --remove-label ${CHERRY_PICK_TEST_LABEL} \
            --remove-label ${TESTS_PASSED} \
            --remove-label ${TESTS_FAILED} \
            --remove-label ${TESTING_IN_PROGRESS} \
            ${PR_NUMBER} || :

          # Asterisk PR will be placed in ASSOCIATED_TEST_PR in both
          # GITHUB_ENV and GITHUB_OUTPUT by the script.
          ${SCRIPT_DIR}/getAssociatedTestPR.sh \
            --repo=${REPO} \
            --pr-number=${PR_NUMBER} \
            --associated-test-pr-regex="${ASSOCIATED_TEST_PR_REGEX}"

          # The script will populate BRANCHES and BRANCH_COUNT in
          # both GITHUB_ENV and GITHUB_OUTPUT for future use but
          # we need them here as well so we need to capture and
          # parse the output.
          result=$(${SCRIPT_DIR}/getCherryPickBranchesFromPR.sh \
            --repo=${REPO} \
            --pr-number=${PR_NUMBER} \
            --cherry-pick-regex="${CHERRY_PICK_REGEX}")
          BRANCH_COUNT=$(echo ${result} | jq -c '.branch_count')
          BRANCHES=$(echo ${result} | jq -c '.branches')
          FORCED_NONE=$(echo ${result} | jq -c '.forced_none')

          if [ ${BRANCH_COUNT} -eq 0 ] ; then
            echo "No cherry-pick branches"
            exit 0
          fi

          branches=$(echo $BRANCHES | jq -r '.[]')
          for b in $branches ; do
            gh cache delete -R ${REPO} ${BUILD_CACHE_KEY_PREFIX}-$b || :
          done

          gh pr edit --repo ${REPO} \
            --add-label ${TESTING_IN_PROGRESS} \
            ${PR_NUMBER} || :

      - name: CheckCherryPicks
        env:
          BRANCHES: ${{ steps.setup.outputs.branches }}
        run: |
          ${SCRIPT_DIR}/cherryPick.sh \
            --repo=${REPO} \
            --repo-dir=${REPO_DIR} \
            --pr-number=${PR_NUMBER} \
            --output-dir=${LOG_DIR} \
            --branches="${BRANCHES}"

      - name: Check if any tests have changed
        id: checkfiles
        run: |
          # Get files from PR
          gh api /repos/${REPO}/pulls/${PR_NUMBER}/files | jq . > /tmp/pr_files
          file_count=$(jq '[ .[].filename ] | length' /tmp/pr_files)
          gatetest_count=$(jq '[ .[].filename | select(startswith("tests")) | select(endswith("test-config.yaml")) ] | length' /tmp/pr_files)
          nontest_count=$(( file_count - gatetest_count ))
          echo "nontest_count=${nontest_count}" >> ${GITHUB_OUTPUT}
          echo "gatetest_count=${gatetest_count}" >> ${GITHUB_OUTPUT}
          if [ $gatetest_count -gt 0 ] ; then
          testfiles=$(jq -r '.[].filename | select(startswith("tests")) | select(endswith("test-config.yaml"))' /tmp/pr_files)
          gatetest_group=custom
          echo "gatetest_group=${gatetest_group}" >> ${GITHUB_OUTPUT}
          testcmd=$(for f in $testfiles ; do echo -n "-t " ; dirname $f ; done)
          {
            echo 'gatetest_commands<<EOF'
            cat <<-INNEREOF
            {
            "${gatetest_group}": {
                "name": "${gatetest_group}",
                "dir": "tests/CI/output/${gatetest_group}",
                "timeout": 240,
                "step_timeout_minutes": 45,
                "options": "",
                "testcmd": "${testcmd}"
            }
            }
          INNEREOF
            echo "EOF"
          } >> ${GITHUB_OUTPUT}
          fi
          echo "File count: $file_count"
          echo "Test count: $gatetest_count"
          echo "Nontest count: $nontest_count"
          echo "Testcmd: $testcmd"

      - name: Save Output
        id: save-output
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: Setup
          if-no-files-found: ignore
          path: ${{ env.LOG_DIR }}

  UnitTest:
    name: UnitTest
    needs: [Setup]
    if: ${{ needs.Setup.outputs.nontest_count > 0 && needs.Setup.outputs.branch_count > 0 && ( success() ) }}
    permissions:
      actions: read
      checks: read
      contents: read
      issues: read
      pull-requests: read
      statuses: read
    strategy:
      fail-fast: false
      matrix:
        branch: ${{ fromJSON(needs.Setup.outputs.branches) }}
    uses: ./.github/workflows/TestsuiteRunUnitTests.yml
    with:
      pr_number:         ${{ github.event.number }}
      base_branch:       ${{ matrix.branch }}
      unittest_command:  ${{ vars.UNITTEST_COMMAND }}

  GateTest:
    name: GateTest
    needs: [ Setup ]
    if: ${{ needs.Setup.outputs.gatetest_count > 0 && needs.Setup.outputs.branch_count > 0 && ( success() ) }}
    permissions:
      actions: read
      checks: read
      contents: read
      issues: read
      pull-requests: read
      statuses: read
    strategy:
      fail-fast: false
      matrix:
        branch: ${{ fromJSON(needs.Setup.outputs.branches) }}
    uses: ./.github/workflows/TestsuiteRunGateTests.yml
    with:
      pr_number:         ${{ github.event.number }}
      base_branch:       ${{ matrix.branch }}
      is_cherry_pick:    true
      asterisk_repo:     ${{ vars.ASTERISK_REPO }}
      gatetest_group:    ${{ needs.Setup.outputs.gatetest_group }}
      gatetest_commands: ${{ needs.Setup.outputs.gatetest_commands }}


  PostWorkflow:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs: [Setup,UnitTest,GateTest]
    env:
      RESULT_SETUP:  ${{ needs.Setup.result }}
      RESULT_UNIT:   ${{ needs.UnitTest.result }}
      RESULT_GATE:   ${{ needs.GateTest.result }}
      BRANCHES: ${{ needs.Setup.outputs.branches }}
    steps:
        # ACTIONS_PATH, SCRIPT_DIR, NORMALIZED_BRANCH env vars
      - name: GetActionsRepo
        uses: asterisk/asterisk-ci-actions/GetActionsRepo@main

      - name: Check status
        run: |
          label=""
          RESULT=$RESULT_CHECK
          branches=$(echo $BRANCHES | jq -r '.[]')
          echo "Branches: ${branches}"
          label=""
          RESULT_FULL="${RESULT_SETUP}-${RESULT_UNIT}-${RESULT_GATE}"
          echo "Result: $RESULT_FULL"
          case $RESULT_FULL in
          success-success-success)
              echo "All passed"
              label=$TESTS_PASSED
              RESULT=success
              for b in $branches ; do
                gh cache delete -R ${REPO} ${BUILD_CACHE_KEY_PREFIX}-$b || :
              done
              ;;
          *failure*)
              echo "at least one failure"
              label=$TESTS_FAILED
              RESULT=failure
              ;;
          *cancelled*)
              echo "at least one cancelled"
              for b in $branches ; do
                gh cache delete -R ${REPO} ${BUILD_CACHE_KEY_PREFIX}-$b || :
              done
              RESULT=failure
              ;;
          *skipped*)
              echo "at least one skipped but others succeeded"
              label=$TESTS_PASSED
              RESULT=success
              ;;
          *)
              echo "unknown result"
              label=$TESTS_FAILED
              RESULT=failure
              ;;
          esac

          gh pr edit --repo ${REPO} \
            --remove-label ${TESTING_IN_PROGRESS} \
            ${label:+--add-label $label} \
              $PR_NUMBER || :

          if [[ $RESULT =~ (success|failure) ]] ; then
            ${SCRIPT_DIR}/createJobSummary.sh \
              --result=${RESULT} \
              --repo=${REPO} \
              --workflow-name="${WORKFLOW_NAME}" \
              --pr-number=${PR_NUMBER} \
              --workflow-run=${WORKFLOW_RUN_ID} \
              --tmp-dir=./run-${WORKFLOW_RUN_ID} \
              --job-summary-output=job_summary.txt \
              --write-step-summary \
              --add-pr-comment \
              --verbose || :
          fi
          exit 0
