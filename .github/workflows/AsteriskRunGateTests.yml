name: 'RunGateTests'
on:
  workflow_call:
    inputs:
      test_type:
        required: false
        type: string
      base_branch:
        required: true
        type: string
      user_group:
        type: string
        required: false
      testsuite_repo:
        description: 'Testsuite Repo (default: asterisk/testsuite)'
        type: string
        required: false
        default: asterisk/testsuite
      testsuite_test_pr:
        type: string
        required: false
      gatetest_group:
        description: 'Gate Group'
        type: string
        required: true
      gatetest_commands:
        description: 'Gate Commands'
        type: string
        required: true
      realtime:
        type: boolean
        required: false
        default: false
      build_cache_dir:
        type: string
        required: false
        default: build-cache
      build_cache_key:
        type: string
        required: true
      sipp_version:
        required: false
        type: string
        default: v3.6.1

env:
  TEST_TYPE:    ${{ inputs.test_type }}
  BASE_BRANCH:  ${{ inputs.base_branch }}
  CACHE_DIR:    ${{ inputs.output_cache_dir }}
  USER_GROUP:   ${{ inputs.user_group }}
  OUTPUT_DIR:   ${{ github.workspace }}/${{ inputs.output_cache_dir }}/output
  REPO_DIR:     ${{ github.event.repository.name }}
  REPO_ORG:     ${{ github.event.repository.owner.login }}
  REALTIME:     ${{ inputs.realtime }}
  SIPP_VERSION: ${{ inputs.sipp_version }}
  TESTSUITE_REPO:     ${{ inputs.testsuite_repo }}
  TESTSUITE_TEST_PR:  ${{ inputs.testsuite_test_pr }}
  GATETEST_GROUP:     ${{ inputs.gatetest_group }}
  GATETEST_COMMAND:   ${{ toJSON(fromJSON(inputs.gatetest_commands)[inputs.gatetest_group]) }}

jobs:
  RunGateTests:
    name: ${{ inputs.base_branch }}-${{ inputs.gatetest_group }}
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
        # ACTIONS_PATH, SCRIPT_DIR, NORMALIZED_BRANCH env vars
      - name: GetActionsRepo
        uses: asterisk/asterisk-ci-actions/GetActionsRepo@main-pr-target

      - name: Setup Runner
        run: |
          # Setup
          source ${SCRIPT_DIR}/ci.functions
          echo "::group::Installing software"
          sudo ${SCRIPT_DIR}/setupRunner.sh --sipp-version=${SIPP_VERSION}
          echo "::endgroup::"

          TESTSUITE_DIR=${GITHUB_WORKSPACE}/$(basename ${TESTSUITE_REPO})
          ASTERISK_DIR=${GITHUB_WORKSPACE}/${REPO_DIR}
          LOG_DIR=${TESTSUITE_DIR}/logs
          LOG_FILE=${LOG_DIR}/job_summary.txt
          export_to_github TESTSUITE_DIR ASTERISK_DIR \
            LOG_DIR LOG_FILE

      - name: Restore Asterisk Cache
        uses: asterisk/asterisk-ci-actions/RestoreAsteriskFromCache@main
        with:
          repo_dir:        ${{ github.event.repository.name }}
          build_cache_dir: ${{ inputs.build_cache_dir }}
          build_cache_key: ${{ inputs.build_cache_key }}
          user_group:      ${{ inputs.user_group }}

      - name: "Setup testsuite"
        run: |
          echo "::group::Setting up testsuite"
          # This scripts exports variables to GITHUB_ENV
          ${SCRIPT_DIR}/setupAsteriskGateTests.sh
          echo "::endgroup::"

      - name: "Run Gate Test ${{inputs.gatetest_group}}"
        run: |
          echo "::group::Run Gate Test ${{inputs.gatetest_group}}"
          TESTRC=0
          # Because we're using sudo, the environment isn't
          # passed to the script so we need to use the
          # command line arguments.  We could use `sudo -E`
          # to pass the complete environment but that's
          # overkill and might cause other issues.
          sudo ${SCRIPT_DIR}/runAsteriskGateTests.sh \
            --test-name=${GATETEST_GROUP} \
            --log-dir=${LOG_DIR} \
            --log-file=${LOG_FILE} \
            --testsuite-dir=${TESTSUITE_DIR} \
            --asterisk-dir=${ASTERISK_DIR} \
            --test-timeout=${TEST_TIMEOUT} --realtime=$REALTIME --stop-database=true \
            --testsuite-command="${TEST_OPTIONS} ${TEST_CMD}" || TESTRC=1
          echo "::endgroup::"
          exit $TESTRC

      - name: Save Output
        id: save-output
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.NORMALIZED_BRANCH }}-${{inputs.gatetest_group}}
          if-no-files-found: ignore
          path: |
            ${{ env.LOG_DIR }}

