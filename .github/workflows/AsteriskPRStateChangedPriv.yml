name: PRStateChangedPriv
on:
  workflow_call:
    inputs:
      actions_ref:
        description: 'JSON object reference to the actions: { "owner": "asterisk", "repo": "asterisk-ci-actions", "branch": "main" }'
        type: string
        required: false
        default: '{ "owner": "asterisk", "repo": "asterisk-ci-actions", "branch": "main" }'
    secrets:
      TOKEN:
        required: true

env:
  ACTION:     ${{ github.event.action }}
  CONCLUSION: ${{ github.event.workflow_run.conclusion }}
  REPO:       ${{ github.repository }}
  GH_TOKEN:   ${{ secrets.TOKEN }}
  SHA:        ${{ github.event.workflow_run.head_sha }}
  HEAD_REPO:  ${{ github.event.workflow_run.head_repository.full_name }}
  WORKFLOW:   ${{ github.event.workflow.name }}
  WORKFLOW_RUN: ${{ github.event.workflow_run.name }}
  WORKFLOW_RUN_ID: ${{ github.event.workflow_run.id }}
  BUILD_CACHE_KEY_PREFIX: ${{ github.event.workflow.name }}-${{ github.event.workflow_run.run_number }}

jobs:
  PRStateChangedPriv:
    if: ( !contains(fromJSON('["skipped", "cancelled"]'), github.event.workflow_run.conclusion) )
    runs-on: ubuntu-latest
    outputs:
      PR_NUMBER:     ${{ steps.getpr.outputs.PR_NUMBER }}
      BASE_BRANCH:   ${{ steps.getpr.outputs.BASE_BRANCH }}
    steps:
      - name: DumpEnvironment
        uses: asterisk/asterisk-ci-actions/DumpEnvironmentAction@main

      - name: Get PR Number
        id: getpr
        run: |
          # Getting PR number from workflow_run.name
          echo "Triggering workflow run name: '${WORKFLOW_RUN}'"
          if [[ "${WORKFLOW_RUN}" =~ ^PR\ ([0-9]+) ]] ; then
            PR_NUMBER=${BASH_REMATCH[1]}
          else
            # If the action was "requested", then the triggering workflow
            # may not have a had a chance to change its name from "PRChanged"
            # to "PR nnnn ..." before this workfow was kicked off.  We need
            # to keep checking the triggering workflow's name until it does.
            echo "Unable to parse '${WORKFLOW_RUN}' for PR number.  Retrying"
            for x in {1..10} ; do
              wfname=$(gh api /repos/${REPO}/actions/runs/${WORKFLOW_RUN_ID} --jq '.name')
              echo "Attempt: ${x} of 10. Triggering workflow run name: '${wfname}'"
              if [[ "${wfname}" =~ ^PR\ ([0-9]+) ]] ; then
                PR_NUMBER=${BASH_REMATCH[1]}
                break;
              fi
              echo "Attempt: ${x} of 10. Still unable to parse.  Waiting 5 seconds"
              sleep 5
            done
          fi
          if [ -z "$PR_NUMBER" ] ; then
            echo "Unable to parse PR number"
            exit 1
          fi
          echo "Found PR ${PR_NUMBER}"
          URL="/repos/${REPO}/pulls/${PR_NUMBER}"
          echo "Using URL $URL to find PR ${PR_NUMBER} base branch"
          BASE_BRANCH=$(gh api $URL --jq '.base.ref')
          if [ -z "$BASE_BRANCH" ] ; then
            echo "::error::No base branch found for PR ${PR_NUMBER}"
            exit 1
          fi
          echo "Found PR ${PR_NUMBER} base branch ${BASE_BRANCH}"
          echo "PR_NUMBER=${PR_NUMBER}" >> ${GITHUB_OUTPUT}
          echo "PR_NUMBER=${PR_NUMBER}" >> ${GITHUB_ENV}
          echo "BASE_BRANCH=${BASE_BRANCH}" >> ${GITHUB_OUTPUT}
          echo "BASE_BRANCH=${BASE_BRANCH}" >> ${GITHUB_ENV}
          exit 0

      - name: SetLabels
        env:
          LABEL_TIP:  ${{ vars.PR_SUBMIT_TESTING_IN_PROGRESS }}
          LABEL_PASS: ${{ vars.PR_SUBMIT_TESTS_PASSED }}
          LABEL_FAIL: ${{ vars.PR_SUBMIT_TESTS_FAILED }}
        run: |
          # Setting labels
          if [ "$ACTION" == "requested" ] ; then
            gh pr edit --repo ${REPO} \
              --remove-label ${LABEL_PASS} \
              --remove-label ${LABEL_FAIL} \
              --add-label ${LABEL_TIP} \
              $PR_NUMBER || :
          else
            [ "$CONCLUSION" == "success" ] && LABEL_RESULT=${LABEL_PASS} || LABEL_RESULT=${LABEL_FAIL}
            gh pr edit --repo ${REPO} \
              --remove-label ${LABEL_TIP} \
              --add-label ${LABEL_RESULT} \
              $PR_NUMBER || :
          fi

      - name: Get cherry-pick branches
        if: github.event.action == 'completed'
        id: getbranches
        uses: asterisk/asterisk-ci-actions/GetCherryPickBranchesFromPR@main
        with:
          repo:              ${{ env.REPO }}
          pr_number:         ${{ steps.getpr.outputs.PR_NUMBER }}
          cherry_pick_regex: ${{ vars.CHERRY_PICK_REGEX }}
          github_token:      ${{ secrets.TOKEN }}

      - name: Add cherry-pick reminder
        if: github.event.action == 'completed'
        env:
          PR_NUMBER:            ${{ steps.getpr.outputs.PR_NUMBER }}
          CHERRY_PICK_REMINDER: ${{ vars.CHERRY_PICK_REMINDER }}
          BRANCHES_OUTPUT:      ${{ toJSON(steps.getbranches.outputs) }}
          BRANCH_COUNT:         ${{ steps.getbranches.outputs.branch_count }}
          FORCED_NONE:          ${{ steps.getbranches.outputs.forced_none }}
        run: |
          # Add cherry-pick reminder
          if [ "$FORCED_NONE" == "true"] || [ ${BRANCH_COUNT} -gt 0 ] ; then
            echo "No reminder needed"
            exit 0
          fi
          URL="/repos/${REPO}/issues/${PR_NUMBER}/comments"
          ALREADY_HAS_CPR=$(gh api $URL --jq '.[] | select(.body | startswith("<!--CPR-->")) | has("body")')
          if [ "$ALREADY_HAS_CPR" == "true" ] ; then
            echo "Already has CPR"
            exit 0
          fi
          echo "$CHERRY_PICK_REMINDER" | gh --repo ${REPO} pr comment ${PR_NUMBER} --body-file -

      - name: PreStart
        if: github.event.action == 'requested'
        run: |
          gh cache delete -R ${REPO} ${WORKFLOW}-${PR_NUMBER}-${BASE_BRANCH} &> /dev/null || :

      - name: PostComplete
        if: ( github.event.action == 'completed' && github.event.workflow_run.conclusion == 'success' )
        run: |
          gh cache delete -R ${REPO} ${BUILD_CACHE_KEY_PREFIX}-${PR_NUMBER}-${BASE_BRANCH} || :
