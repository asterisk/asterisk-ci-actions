name: 'RAUT'
on:
  workflow_call:
    inputs:
      test_type:
        required: true
        type: string
      base_branch:
        required: true
        type: string
      user_group:
        type: string
        required: false
        default: asteriskci:users
      unittest_command:
        type: string
        required: true
      output_cache_dir:
        type: string
        required: false
        default: cache
      build_cache_dir:
        type: string
        required: false
        default: build-cache
      build_cache_key:
        type: string
        required: true

env:
  GH_TOKEN:         ${{ secrets.TOKEN }}
  GITHUB_TOKEN:     ${{ secrets.TOKEN }}
  TEST_TYPE:        ${{ inputs.test_type }}
  BASE_BRANCH:      ${{ inputs.base_branch }}
  CACHE_DIR:        ${{ inputs.output_cache_dir }}
  USER_GROUP:       ${{ inputs.user_group }}
  ACTION_DIR:       asterisk-ci-actions
  SCRIPT_DIR:       ${{ github.workspace }}/asterisk-ci-actions/scripts
  OUTPUT_DIR:       ${{ github.workspace }}/${{ inputs.output_cache_dir }}/output
  REPO_DIR:         ${{ github.event.repository.name }}
  REPO_ORG:         ${{ github.event.repository.owner.login }}
  CI_BRANCH:        main
  BUILD_CACHE_DIR:  ${{ inputs.build_cache_dir }}
  BUILD_CACHE_KEY:  ${{ inputs.build_cache_key }}
  UNITTEST_COMMAND: ${{ inputs.unittest_command }}

jobs:
  RunUnitTests:
    name: ${{ inputs.base_branch }}-unit
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/asterisk/asteriskci-agent-rocky8:latest
      options: --privileged
    defaults:
      run:
        shell: bash
    steps:
      - name: Restore Asterisk Cache
        uses: asterisk/asterisk-ci-actions/RestoreAsteriskFromCache@main
        with:
          repo_dir:        ${{ github.event.repository.name }}
          build_cache_dir: ${{ inputs.build_cache_dir }}
          build_cache_key: ${{ inputs.build_cache_key }}
          user_group:      ${{ inputs.user_group }}

      - name: Setup
        run: |
          sysctl -w kernel.core_pattern=/tmp/core-%e-%t
          chmod 1777 /tmp
          echo "UNIT_TEST_NAME=${TEST_TYPE}-unit-${BASE_BRANCH//\//-}" >> "${GITHUB_ENV}"
          echo "*** Cloning ${REPO_ORG}/${ACTION_DIR}"
          git clone ${GITHUB_SERVER_URL}/${REPO_ORG}/${ACTION_DIR}
          git -C ${ACTION_DIR} checkout ${CI_BRANCH:-main}
          mkdir -p ${OUTPUT_DIR}

      - name: Run Unit Tests
        run: |
          if [ -d ${REPO_DIR} ] ; then
            echo "*** Found asterisk source cache '${REPO_DIR}'"
            chown -R ${USER_GROUP} ${REPO_DIR}
            cd ${REPO_DIR}
            chmod go-rw tests/keys/rsa_key1.key
          fi
          echo "*** Running asterisk unit tests"
          ${SCRIPT_DIR}/runAsteriskUnitTests.sh --no-expect --github \
            --user-group=${USER_GROUP} \
            --output-dir=${OUTPUT_DIR} \
            --output-xml=${OUTPUT_DIR}/unittests-results.xml \
            --unittest-command="${UNITTEST_COMMAND}"

      - name: Save Output
        id: save-output
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.UNIT_TEST_NAME }}
          path: ${{ inputs.output_cache_dir }}/output

