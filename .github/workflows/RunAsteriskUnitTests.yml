name: RunUnitTests
on:
  workflow_call:
    inputs:
      actions_ref:
        description: 'JSON object reference to the actions: { "owner": "asterisk", "repo": "asterisk-ci-actions", "branch": "main" }'
        type: string
        required: false
        default: '{ "owner": "asterisk", "repo": "asterisk-ci-actions", "branch": "main" }'
      test_type:
        required: false
        type: string
      base_branch:
        required: true
        type: string
      user_group:
        type: string
        required: false
      unittest_command:
        type: string
        required: true
      output_cache_dir:
        type: string
        required: false
        default: cache
      build_cache_dir:
        type: string
        required: false
        default: build-cache
      build_cache_key:
        type: string
        required: true
      sipp_version:
        required: false
        type: string
        default: v3.6.1
    secrets:
      TOKEN:
        required: true

env:
  GH_TOKEN:         ${{ secrets.TOKEN }}
  GITHUB_TOKEN:     ${{ secrets.TOKEN }}
  TEST_TYPE:        ${{ inputs.test_type }}
  BASE_BRANCH:      ${{ inputs.base_branch }}
  CACHE_DIR:        ${{ inputs.output_cache_dir }}
  USER_GROUP:       ${{ inputs.user_group }}
  OUTPUT_DIR:       ${{ github.workspace }}/${{ inputs.output_cache_dir }}/output
  REPO_DIR:         ${{ github.event.repository.name }}
  REPO_ORG:         ${{ github.event.repository.owner.login }}
  SIPP_VERSION:     ${{ inputs.sipp_version }}
  BUILD_CACHE_DIR:  ${{ inputs.build_cache_dir }}
  BUILD_CACHE_KEY:  ${{ inputs.build_cache_key }}
  UNITTEST_COMMAND: ${{ inputs.unittest_command }}
  LOG_DIR:          ${{ github.workspace }}/logs
  LOG_FILE:         ${{ github.workspace }}/logs/job_summary.txt
  ACTIONS_OWNER:    ${{ fromJSON(inputs.actions_ref).owner }}
  ACTIONS_REPO:     ${{ fromJSON(inputs.actions_ref).repo }}
  ACTIONS_BRANCH:   ${{ fromJSON(inputs.actions_ref).branch }}
  SCRIPT_DIR:       ${{ github.workspace }}/asterisk-ci-actions/scripts

jobs:
  RunUnitTests:
    name: ${{ inputs.base_branch }}-unit
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Setup Runner
        run: |
          # Setup
          echo "::group::Getting actions repo"
          wget -qO asterisk-ci-actions.tar.gz \
            https://github.com/${ACTIONS_OWNER}/${ACTIONS_REPO}/archive/refs/heads/${ACTIONS_BRANCH}.tar.gz
          tar -xf asterisk-ci-actions.tar.gz --transform="s/^${ACTIONS_REPO}-${ACTIONS_BRANCH}/asterisk-ci-actions/g"
          echo "::endgroup::"
          echo "::group::Installing software"
          sudo ${SCRIPT_DIR}/setupRunner.sh --sipp-version=${SIPP_VERSION}
          echo "::endgroup::"
          echo "NORMALIZED_BRANCH=${BASE_BRANCH/\//-}" >> ${GITHUB_ENV}
          mkdir -p ${LOG_DIR}
          mkdir -p ${OUTPUT_DIR}

      - name: Restore Asterisk Cache
        uses: ./asterisk-ci-actions/RestoreAsteriskFromCache
        with:
          repo_dir:        ${{ github.event.repository.name }}
          build_cache_dir: ${{ inputs.build_cache_dir }}
          build_cache_key: ${{ inputs.build_cache_key }}
          user_group:      ${{ inputs.user_group }}

      - name: Run Unit Tests
        run: |
          echo "::group::Running unit tests"
          UNIT_TEST_NAME=${BASE_BRANCH//\//-}-unit
          if [ ! -d ${REPO_DIR} ] ; then
            echo "*** Didn't find asterisk source cache '${REPO_DIR}'" >> ${LOG_FILE}
            exit 1
          fi
          [ -n "${USER_GROUP}" ] && chown -R ${USER_GROUP} ${REPO_DIR}
          cd ${REPO_DIR}
          if [ -f tests/keys/rsa_key1.key ] ; then
              chmod go-rw tests/keys/rsa_key1.key || :
          else
            echo "Didn't find crypto keys" >> ${LOG_FILE}
            exit 1
          fi
          mkdir -p ${OUTPUT_DIR}
          echo "*** Running asterisk unit tests"
          ${SCRIPT_DIR}/runAsteriskUnitTests.sh --no-expect --github \
            --job-summary-output=job_summary.txt \
            --test-name=${UNIT_TEST_NAME} \
            --user-group=${USER_GROUP} \
            --output-dir=${OUTPUT_DIR} \
            --output-xml=${OUTPUT_DIR}/unittests-results.xml \
            --unittest-command="${UNITTEST_COMMAND}"

      - name: Save Output
        id: save-output
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.NORMALIZED_BRANCH }}-unit
          if-no-files-found: ignore
          path: |
            ${{ env.LOG_DIR }}
            ${{ inputs.output_cache_dir }}/output

