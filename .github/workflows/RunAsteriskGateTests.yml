name: 'RunGateTests'
on:
  workflow_call:
    inputs:
      actions_ref:
        description: 'JSON object reference to the actions: { "owner": "asterisk", "repo": "asterisk-ci-actions", "branch": "main" }'
        type: string
        required: false
        default: '{ "owner": "asterisk", "repo": "asterisk-ci-actions", "branch": "main" }'
      test_type:
        required: false
        type: string
      base_branch:
        required: true
        type: string
      user_group:
        type: string
        required: false
      testsuite_repo:
        description: 'Testsuite Repo (default: asterisk/testsuite)'
        type: string
        required: false
        default: asterisk/testsuite
      testsuite_test_pr:
        type: string
        required: false
      gatetest_group:
        description: 'Gate Group'
        type: string
        required: true
      gatetest_commands:
        description: 'Gate Commands'
        type: string
        required: true
      realtime:
        type: boolean
        required: false
        default: false
      build_cache_dir:
        type: string
        required: false
        default: build-cache
      build_cache_key:
        type: string
        required: true
    secrets:
      TOKEN:
        required: true

env:
  GH_TOKEN:     ${{ secrets.TOKEN }}
  GITHUB_TOKEN: ${{ secrets.TOKEN }}
  TEST_TYPE:    ${{ inputs.test_type }}
  BASE_BRANCH:  ${{ inputs.base_branch }}
  CACHE_DIR:    ${{ inputs.output_cache_dir }}
  USER_GROUP:   ${{ inputs.user_group }}
  OUTPUT_DIR:   ${{ github.workspace }}/${{ inputs.output_cache_dir }}/output
  REPO_DIR:     ${{ github.event.repository.name }}
  REPO_ORG:     ${{ github.event.repository.owner.login }}
  REALTIME:     ${{ inputs.realtime }}
  TESTSUITE_REPO:     ${{ inputs.testsuite_repo }}
  TESTSUITE_TEST_PR:  ${{ inputs.testsuite_test_pr }}
  GATETEST_GROUP:     ${{ inputs.gatetest_group }}
  GATETEST_COMMAND:   ${{ toJSON(fromJSON(inputs.gatetest_commands)[inputs.gatetest_group]) }}
  ACTIONS_OWNER:    ${{ fromJSON(inputs.actions_ref).owner }}
  ACTIONS_REPO:     ${{ fromJSON(inputs.actions_ref).repo }}
  ACTIONS_BRANCH:   ${{ fromJSON(inputs.actions_ref).branch }}
  SCRIPT_DIR:       ${{ github.workspace }}/asterisk-ci-actions/scripts

jobs:
  RunGateTests:
    name: ${{ inputs.base_branch }}-${{ inputs.gatetest_group }}
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Setup Runner
        run: |
          # Setup
          wget -qO asterisk-ci-actions.tar.gz \
            https://github.com/${ACTIONS_OWNER}/${ACTIONS_REPO}/archive/refs/heads/${ACTIONS_BRANCH}.tar.gz
          tar -xf asterisk-ci-actions.tar.gz --transform="s/^${ACTIONS_REPO}-${ACTIONS_BRANCH}/asterisk-ci-actions/g"
          sudo ${SCRIPT_DIR}/setupRunner.sh

      - name: Restore Asterisk Cache
        uses: ./asterisk-ci-actions/RestoreAsteriskFromCache
        with:
          repo_dir:        ${{ github.event.repository.name }}
          build_cache_dir: ${{ inputs.build_cache_dir }}
          build_cache_key: ${{ inputs.build_cache_key }}
          user_group:      ${{ inputs.user_group }}

      - name: "Setup testsuite"
        run: |
          # Setup testsuite
          ${SCRIPT_DIR}/setupAsteriskGateTests.sh
          mkdir -p ${OUTPUT_DIR}

      - name: "Run Gate Test ${{inputs.gatetest_group}}"
        run: |
          # Run Gate Test ${{inputs.gatetest_group}}
          TESTRC=0
          sudo ${SCRIPT_DIR}/runAsteriskGateTests.sh \
            --testsuite-dir=${TESTSUITE_DIR} \
            --test-timeout=${TEST_TIMEOUT} --realtime=$REALTIME --stop-database=true \
            --testsuite-command="${TEST_OPTIONS} ${TEST_CMD}" || TESTRC=1
          exit $TESTRC

      - name: Save Output
        id: save-output
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.GC_TEST_NAME }}
          path: |
            ${{ env.GC_TESTSUITE_DIR }}/logs

