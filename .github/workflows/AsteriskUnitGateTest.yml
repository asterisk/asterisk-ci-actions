name: AsteriskUnitGateTest
on:
  workflow_call:
    inputs:
      test_type:
        description: 'nightly, prstatechange, prrecheck, cherry-pick'
        required: true
        type: string
      asterisk_repo:
        required: true
        type: string
      pr_number:
        required: true
        type: string
      base_branch:
        required: true
        type: string
      is_cherry_pick:
        required: false
        type: boolean
        default: false
      build_script:
        required: false
        type: string
        default: "buildAsterisk.sh"
      build_options:
        required: false
        type: string
        default: ""
      modules_blacklist:
        description: 'List of Asterisk modules to blacklist from the build'
        type: string
        default: ""
        required: false
      testsuite_test_type:
        required: false
        type: string
        default: Gate

jobs:
  Setup:
    runs-on: ubuntu-latest
    outputs:
      control_data:  ${{ steps.setvars.outputs.control_data }}
    steps:
      - id: setvars
        uses: asterisk/asterisk-ci-actions/GetRepoControlData@main
        with:
          repo: ${{ inputs.asterisk_repo }}

      - name: SetupUbuntuRunner
        uses: asterisk/asterisk-ci-actions/SetupUbuntuRunner@main

  RunAsteriskUnitTests:
    needs: Setup
    uses: ./.github/workflows/RunAsteriskUnitTests.yml
    with:
      asterisk_repo:     ${{ inputs.asterisk_repo }}
      pr_number:         ${{ inputs.pr_number }}
      base_branch:       ${{ inputs.base_branch }}
      build_options:     ${{ inputs.build_options }}
      unittest_command:  'test execute category /TEST_PASS_FAIL/ name JUST_PASS'
#      unittest_command:  ${{ fromJSON(needs.Setup.outputs.control_data).UNITTEST_COMMAND }}
#
#  RunAsteriskGateTests:
#    needs: Setup
#    strategy:
#      fail-fast: false
#      matrix:
#        group: ${{ fromJSON(fromJSON(needs.Setup.outputs.control_data).GATETEST_LIST) }}
#    uses: ./.github/workflows/RunAsteriskGateTests.yml
#    env:
#      TESTSUITE_REPO:    "${{ fromJSON(needs.Setup.outputs.control_data).TESTSUITE_REPO }}"
#      GATETEST_COMMANDS: "${{ fromJSON(needs.Setup.outputs.control_data).GATETEST_COMMANDS }}"
#      GATETEST_COMMAND: "${{ toJSON(fromJSON(fromJSON(needs.Setup.outputs.control_data).GATETEST_COMMANDS)[matrix.group]) }}"
#    with:
#      test_type:         Gate
#      asterisk_repo:     ${{ inputs.asterisk_repo }}
#      pr_number:         ${{ inputs.pr_number }}
#      base_branch:       ${{ inputs.base_branch }}
#      testsuite_repo:    ${{ env.TESTSUITE_REPO }}
#      gatetest_group:    ${{matrix.group}}
#      gatetest_command:  ${{ env.GATETEST_COMMAND }}
#
#  TestResults:
#    if: always()
#    runs-on: ubuntu-latest
#    needs: [RunAsteriskUnitTests,RunAsteriskGateTests]
#    steps:
#      - name: Check test matrix status
#        env:
#          GH_TOKEN:  ${{ secrets.ASTERISKTEAM_PAT }}
#          PR_NUMBER: ${{ inputs.pr_number }}
#          RESULT_UNIT: ${{ needs.RunAsteriskUnitTests.result }}
#          RESULT_GATE: ${{ needs.RunAsteriskGateTests.result }}
#          TESTS_PASSED: ${{ fromJSON(needs.Setup.outputs.control_data).PR_SUBMIT_TESTS_PASSED }}
#          TESTS_FAILED: ${{ fromJSON(needs.Setup.outputs.control_data).PR_SUBMIT_TESTS_FAILED }}
#        run: |
#          declare -i rc=0
#          echo "all results: ${{ toJSON(needs.*.result) }}"
#          case $RESULT_UNIT in
#            success)
#              echo "::notice::Unit tests passed"
#              ;;
#            skipped)
#              echo "::error::Unit tests were skipped because of an earlier failure"
#              rc+=1
#              ;;
#            *)
#              echo "::error::One or more unit tests failed ($RESULT_UNIT)"
#              rc+=1
#          esac
#          case $RESULT_GATE in
#            success)
#              echo "::notice::Gate tests passed"
#              ;;
#            skipped)
#              echo "::error::Gate tests were skipped because of an earlier failure"
#              rc+=1
#              ;;
#            *)
#              echo "::error::One or more gate tests failed ($RESULT_GATE)"
#              rc+=1
#          esac
#          exit $rc
