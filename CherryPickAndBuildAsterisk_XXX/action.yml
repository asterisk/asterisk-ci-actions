name: CherryPickAndBuildAsterisk_XXX
inputs:
  cache-key:
    required: false
    type: string
    default: "NO_CACHE"
  asterisk-repo:
    required: true
    type: string
  pr-number:
    required: true
    type: number
  pr-commit:
    required: true
    type: string
  base-branch:
    required: true
    type: string
  github-token:
    description: 'GitHub API Access Token.'
    default: ${{ github.token }}
    required: false
  modules-blacklist:
    description: 'List of Asterisk modules to blacklist from the build'
    default: ""
    required: false

runs:
  using: "composite"
  steps:

    - name: Checkout Destination Branch
      uses: asterisk/asterisk-ci-actions/checkout@main
      with:
        repository: ${{inputs.asterisk-repo}}
        ref: ${{ inputs.base-branch }}
        clean: true
        fetch-depth: 5
        set-safe-directory: true
        quiet: true

    - name: Cherry Pick PR
      shell: bash
      env:
        PR_NUMBER: ${{ inputs.pr-number }}
      run: |
        commits=$(gh api repos/asterisk/asterisk-gh-test/pulls/${PR_NUMBER}/commits --jq '.[].sha')
        IFS=$'\n '
        for commit in $commits ; do
          git cherry-pick
        done 

    - name: Setup Asterisk Build Environment
      shell: bash
      run: |
        echo "::notice::Setup Asterisk Build Environment"
        echo -e "::notice::Last 5 commits: \n$(git log -5 --format='%h (%an) (%ai) %s')"
        mkdir -p /srv/cache/externals /srv/cache/sounds /srv/cache/ccache || :
        chown -R asteriskci:users /srv/cache
        chmod g+rw /srv/cache/ccache
        chmod g+s /srv/cache/ccache
        mkdir -p tests/CI/output || :
        chown -R asteriskci:users tests/CI/output
        echo "COMMIT=$(git log -1 --format='%H')" >> "$GITHUB_ENV"

    - name: Build Asterisk
      shell: bash
      env:
        BRANCH: ${{ inputs.base-branch }}
        CACHE_KEY: ${{ inputs.cache-key }}
        MODULES_BLACKLIST: ${{ inputs.modules-blacklist }}
      run: |
        echo "::notice::Build Asterisk"
        ./tests/CI/buildAsterisk.sh --github --branch-name=$BRANCH \
          --modules-blacklist="${MODULES_BLACKLIST//,/ }" \
          --output-dir=./tests/CI/output
        # Save the output for the caller
        if [ "$CACHE_KEY" != "NO_CACHE" ] ; then
          mkdir -p /tmp/asterisk-install/output
          rsync -vaH ./tests/CI/output/. /tmp/asterisk-install/output/
        fi

    - name: Install Asterisk
      if: ${{ success() }}
      shell: bash
      env:
        BRANCH: ${{ inputs.base-branch }}
        CACHE_KEY: ${{ inputs.cache-key }}
      run: |
        echo "::notice::Install Asterisk"
        if [ "$CACHE_KEY" != "NO_CACHE" ] ; then
          DESTDIR_OPT=--destdir=/tmp/asterisk-install/sysroot
        else
          DESTDIR_OPT=
        fi
        ./tests/CI/installAsterisk.sh --github --uninstall-all \
          --branch-name=$BRANCH --user-group=asteriskci:users \
          --output-dir=./tests/CI/output $DESTDIR_OPT 

    - name: Save Output
      if: ${{ always() }}
      uses: actions/upload-artifact@v3
      with:
        name: Test Results
        path: ./tests/CI/output

    - name: Cache Build Products
      if: inputs.cache-key != 'NO_CACHE'
      uses: actions/cache/save@v3
      with:
        key: ${{ inputs.cache-key }}
        path: |
          /tmp/asterisk-install/sysroot
          /tmp/asterisk-install/output

